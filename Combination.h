#ifndef COMBINATION_H
#define COMBINATION_H

#include <iostream>
#include <vector>
#include <math.h>


/*
	This is a slight adjustment to the following combination algorithm:
	https://drive.google.com/file/d/1upjiOWM20ytxrxuqoaZNsYX_pF9sFUsG/view

	Adjustments include template types, change from arrayS to vectors as parameters,
	an additional vector parameter passed by reference, and
	the function now no longer prints the combinations, but stores the values in 
	"completeCollection" parameter, which is passed by reference.

	The algorithm still follows the "tree pattern" which is explained in the following
	video:
	https://www.youtube.com/watch?v=7IQHYbmuoVU
*/
template<typename T>
void combinationUtil(std::vector<std::vector<T>>& completeCollection, 
                     std::vector<T> vec, 
                     std::vector<T> data, 
					 int start, int end, 
					 int index, int r) 
{ 
	
	if (index == r) 
	{ 
		completeCollection.push_back(data);
		return; 
	} 


	for (int i = start; i <= end && 
		end - i + 1 >= r - index; i++) 
	{ 
		data.at(index) = vec.at(i); 
		combinationUtil(completeCollection, vec, data, i+1, 
						end, index+1, r); 
	} 
} 


/*
	This function utilizes the combinationUtil function, but passes every possible r value
	based on the size of the passed collection.
*/
template<typename T>
std::vector<std::vector<T>> GetCombinations(std::vector<T>& elements)
{ 
    std::vector<std::vector<T>> combinations;
    int maxR = elements.size();

    for(int r = 1; r <= maxR; ++r)
    {
        std::vector<T> data(r);
        combinationUtil(combinations, elements, data, 0, elements.size()-1, 0, r);
        data.clear();
    }

	return combinations;

}


/*
	This function prints out a combination collection generated by the
	above functions.
*/
template<typename T>
void PrintCombinationCollection(const std::vector<std::vector<T>>& combinations)
{

	for(const std::vector<T>& combo : combinations)
	{
		std::cout << "{ ";
		for(const T& element : combo)
		{
			std::cout << element << " ";
		}
		std::cout << "}\n";
	}
}

#endif